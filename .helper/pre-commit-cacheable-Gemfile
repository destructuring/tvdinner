#!/bin/bash
#
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

# if Gemfile or Gemfile.lock has been modified
modified="$(git status --porcelain Gemfile Gemfile.lock | egrep -v '^[:blank:]' | cut -b1-2)"
if [[ -n $modified ]]; then
  # must detect a clean index and set error to 0 explicitly
  error=1

  if echo "$modified" | egrep -q "^M"; then
    # status M[ ]
    if echo "$modified" | egrep -q "^M[ ]"; then
      git stash -q -u --keep-index 2>&1 | egrep -v '^Not removing'

      if [[ -n "$(egrep '^[ 	]*gem[ 	]' Gemfile | sed 's/#.*//' | egrep ':(git|path)')" ]]; then
        echo "There are :git or :path specifiers in Gemfile.  Only gem specifiers that are bundle cacheable are permitted."
      else
        error=0
      fi

      git reset --hard
      git stash pop -q --index
    else
      # status M?
      echo "Gemfile/Gemfile.lock added to index with local changes.  Either reset the file or add your local changes."
    fi
  elif echo "$modified" | egrep -q "^[ ]"; then
    # status [ ]?
    error=0
  else
    # status ??
    echo "Gemfile/Gemfile.lock in a weird state.  Make sure it is not deleted or in conflict."
  fi

  # check if status Gemfile.lock changes after bundle install
  git stash -q -u --keep-index 2>&1 | egrep -v '^Not removing'

  glock_pre="$(git status --porcelain Gemfile.lock | cut -b1-2)"
  bundle install --local > /dev/null
  glock_post="$(git status --porcelain Gemfile.lock | cut -b1-2)"

  git reset --hard
  git stash pop -q --index

  if [[ $glock_pre != $glock_post ]]; then
    echo "Gemfile.lock changed after bundle install --local.  Verify these changes and add them to the index."

    # reset error in case Gemfile was cleared earlier
    error=1
  fi

  exit $error
fi

